package pages

import (
	"mobile-backend-boilerplate/internal/view/icons"
	"mobile-backend-boilerplate/internal/view/layouts"
	"mobile-backend-boilerplate/internal/view/partials"
)

type LoginFormData struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type LoginFormState struct {
	Values      map[string]string
	Errors      map[string]string
	GlobalError string
}

func NewLoginFormState() LoginFormState {
	values := make(map[string]string)

	return LoginFormState{
		Values:      values,
		Errors:      make(map[string]string),
		GlobalError: "",
	}
}

func NewLoginFormStateFromRequest(req LoginFormData) LoginFormState {
	values := map[string]string{
		"username": req.Username,
		"password": req.Password,
	}

	return LoginFormState{
		Values: values,
		Errors: make(map[string]string),
	}
}

func NewLoginFormStateWithErrors(req LoginFormData, errors map[string]string) LoginFormState {
	fs := NewLoginFormStateFromRequest(req)
	fs.Errors = errors

	return fs
}

templ LoginPage(props layouts.PublicLayoutProps, state LoginFormState) {
	@layouts.PublicLayout(props) {
		@LoginPagePartial() {
			@LoginPagePartialForm(state)
		}
	}
}

templ LoginPageContent(props layouts.PublicLayoutProps, state LoginFormState) {
	@layouts.PublicLayoutPartial(props) {
		@LoginPagePartial() {
			@LoginPagePartialForm(state)
		}
	}
}

templ LoginPagePartial() {
	<style>
        input:invalid,
        textarea:invalid {
            border-color: var(--error);
        }

        .input-wrapper {
            position: relative;
            display: flex;
            align-items: center;

            input {
                width: 100%;
                padding-right: var(--space-2xl);
            }

            button {
                position: absolute;
                right: var(--space-xxs);
                cursor: pointer;
                user-select: none;

                width: var(--space-xl);
                height: var(--space-xl);
            }
        }

        .error-message {
            color: var(--error);
            font-size: var(--text-xs);
            margin-top: var(--space-xxs);
        }

        .radio-group {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(110px, 1fr));
            gap: var(--space-sm);
            width: 100%;
        }

        .send,
        .loader,
        .success {
            display: none;
        }

        .send.show,
        .loader.show,
        .success.show {
            display: inline-block;
        }
    </style>
	@partials.Card(500) {
		{ children... }
	}
}

templ LoginPagePartialForm(state LoginFormState) {
	<form
		class="form"
		hx-post="/auth/login"
		hx-trigger="submit"
		hx-target="this"
		hx-swap="outerHTML"
	>
		<h1>–ê–¥–º–∏–Ω–∫–∞</h1>
		if state.Errors["form"] != "" {
			<span class="error-message show">{ state.Errors["form"] }</span>
		}
		<div class="field-group">
			<label>–õ–æ–≥–∏–Ω *</label>
			<input name="username" class="input-field" value={ state.Values["username"] }/>
			if state.Errors["username"] != "" {
				<span class="error-message show">{ state.Errors["username"] }</span>
			}
		</div>
		<div class="field-group">
			<label>–ü–∞—Ä–æ–ª—å *</label>
            <div class="input-wrapper">
                <input id="password" name="password" class="input-field" type="password" value={ state.Values["password"] }/>
                <button
                    class="btn btn-icon btn-ghost"
                    type="button"
                    hx-on:click="this.textContent = (this.textContent === 'üëÅ' ? 'üôà' : 'üëÅ'); 
                            document.getElementById('password').type = 
                            (document.getElementById('password').type === 'password' ? 'text' : 'password')"
                >
                    üëÅ
                </button>
            </div>
			if state.Errors["password"] != "" {
				<span class="error-message show">{ state.Errors["password"] }</span>
			}
		</div>
		<button type="submit" class="btn">
			–í–æ–π—Ç–∏
			@icons.LogIn("w-4 h-4")
		</button>
	</form>
}
